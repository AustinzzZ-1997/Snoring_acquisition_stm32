<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\REC.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\REC.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Feb 10 21:45:22 2020
<BR><P>
<H3>Maximum Stack Usage =        464 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[94]">__user_initial_stackheap</a>
 <LI><a href="#[cc]">M8266HostIf_SPI_DMA_StartReceiveSendData</a>
 <LI><a href="#[96]">M8266HostIf_SPI_Select</a>
 <LI><a href="#[ca]">M8266HostIf_SPI_rrs</a>
 <LI><a href="#[cb]">M8266HostIf_SPI_wrs</a>
 <LI><a href="#[9b]">M8266WIFI_SPI_Config_STA_Param</a>
 <LI><a href="#[9d]">M8266WIFI_SPI_Config_Tcp_Window_num</a>
 <LI><a href="#[9f]">M8266WIFI_SPI_Delete_Connection</a>
 <LI><a href="#[99]">M8266WIFI_SPI_Get_Module_Info</a>
 <LI><a href="#[a5]">M8266WIFI_SPI_Get_Opmode</a>
 <LI><a href="#[a6]">M8266WIFI_SPI_Get_STA_Connection_Status</a>
 <LI><a href="#[a7]">M8266WIFI_SPI_Get_STA_IP_Addr</a>
 <LI><a href="#[a8]">M8266WIFI_SPI_Has_DataReceived</a>
 <LI><a href="#[aa]">M8266WIFI_SPI_Interface_Communication_OK</a>
 <LI><a href="#[ac]">M8266WIFI_SPI_Interface_Communication_Stress_Test</a>
 <LI><a href="#[ad]">M8266WIFI_SPI_Query_Connection</a>
 <LI><a href="#[ae]">M8266WIFI_SPI_Query_Tcp_Mss</a>
 <LI><a href="#[b0]">M8266WIFI_SPI_Query_Tcp_Window_num</a>
 <LI><a href="#[b1]">M8266WIFI_SPI_Recv</a>
 <LI><a href="#[b9]">M8266WIFI_SPI_RecvData</a>
 <LI><a href="#[ba]">M8266WIFI_SPI_STA_Connect_Ap</a>
 <LI><a href="#[bb]">M8266WIFI_SPI_STA_Connect_Ap_Old</a>
 <LI><a href="#[bc]">M8266WIFI_SPI_STA_DisConnect_Ap</a>
 <LI><a href="#[be]">M8266WIFI_SPI_STA_Get_HostIP_by_HostName</a>
 <LI><a href="#[c1]">M8266WIFI_SPI_STA_Query_Current_SSID_And_RSSI</a>
 <LI><a href="#[c2]">M8266WIFI_SPI_Send_BlockData</a>
 <LI><a href="#[c4]">M8266WIFI_SPI_Set_Opmode</a>
 <LI><a href="#[c5]">M8266WIFI_SPI_Setup_Connection</a>
 <LI><a href="#[c6]">M8266WIFI_SPI_Slave_Has_Response</a>
 <LI><a href="#[b8]">M8266WIFI_SPI_Status_Start_To_Rxd_Has_Been_Cleared</a>
 <LI><a href="#[c7]">M8266WIFI_SPI_TxdBuffer_Free</a>
 <LI><a href="#[9c]">M8266WIFI_SPI_capstp</a>
 <LI><a href="#[a2]">M8266WIFI_SPI_csb</a>
 <LI><a href="#[9e]">M8266WIFI_SPI_ctpsp</a>
 <LI><a href="#[a0]">M8266WIFI_SPI_dlodc</a>
 <LI><a href="#[c8]">M8266WIFI_SPI_qacal</a>
 <LI><a href="#[af]">M8266WIFI_SPI_qtpsp</a>
 <LI><a href="#[ab]">M8266WIFI_SPI_rra</a>
 <LI><a href="#[b7]">M8266WIFI_SPI_rru</a>
 <LI><a href="#[b4]">M8266WIFI_SPI_rrud</a>
 <LI><a href="#[b5]">M8266WIFI_SPI_sbis</a>
 <LI><a href="#[c3]">M8266WIFI_SPI_sdfal</a>
 <LI><a href="#[c0]">M8266WIFI_SPI_sptdt</a>
 <LI><a href="#[a4]">M8266WIFI_SPI_srh</a>
 <LI><a href="#[a9]">M8266WIFI_SPI_ssa</a>
 <LI><a href="#[a3]">M8266WIFI_SPI_ssb</a>
 <LI><a href="#[97]">M8266WIFI_SPI_ssmd</a>
 <LI><a href="#[bf]">M8266WIFI_SPI_sstso</a>
 <LI><a href="#[d2]">M8266WIFI_SPI_ssu</a>
 <LI><a href="#[d1]">M8266WIFI_SPI_ssud</a>
 <LI><a href="#[cf]">M8266WIFI_SPI_ssut</a>
 <LI><a href="#[d4]">M8266WIFI_SPI_tufs</a>
 <LI><a href="#[cd]">M8266WIFI_SPI_wsbsbs1</a>
 <LI><a href="#[a1]">M8266WIFI_SPI_wscbf</a>
 <LI><a href="#[d3]">M8266WIFI_SPI_wscr</a>
 <LI><a href="#[b3]">M8266WIFI_SPI_wspsr</a>
 <LI><a href="#[ce]">M8266WIFI_SPI_wspss</a>
 <LI><a href="#[b6]">M8266WIFI_SPI_wsscbhud</a>
 <LI><a href="#[b2]">M8266WIFI_SPI_wsscrhd</a>
 <LI><a href="#[d0]">M8266WIFI_Wait_SPI_sfad</a>
 <LI><a href="#[9a]">fvcp</a>
 <LI><a href="#[bd]">fvdnstap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[21]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[21]">ADC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[9]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[23]">CAN1_RX0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[24]">CAN1_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[25]">CAN1_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[22]">CAN1_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4f]">CAN2_RX0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[50]">CAN2_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[51]">CAN2_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4e]">CAN2_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5e]">CRYP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5d]">DCMI_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream3_IRQHandler</a> from i2s.o(i.DMA1_Stream3_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream4_IRQHandler</a> from i2s.o(i.DMA1_Stream4_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[20]">DMA1_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3e]">DMA1_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[54]">DMA2_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[55]">DMA2_Stream7_IRQHandler</a> from ussend.o(i.DMA2_Stream7_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[c]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4c]">ETH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4d]">ETH_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[15]">EXTI0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[37]">EXTI15_10_IRQHandler</a> from exti.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[16]">EXTI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[17]">EXTI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[18]">EXTI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[19]">EXTI4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[26]">EXTI9_5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[13]">FLASH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[60]">FPU_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3f]">FSMC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5f]">HASH_RNG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2f]">I2C1_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2e]">I2C1_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[31]">I2C2_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[30]">I2C2_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[58]">I2C3_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[57]">I2C3_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[8]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[52]">OTG_FS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[39]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5a]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[59]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5c]">OTG_HS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5b]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[10]">PVD_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[d]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[14]">RCC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[38]">RTC_Alarm_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[12]">RTC_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[40]">SDIO_IRQHandler</a> from sdio_sdcard.o(i.SDIO_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[32]">SPI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[33]">SPI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[42]">SPI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[b]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[e]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[61]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[11]">TAMP_STAMP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[27]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2a]">TIM1_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[29]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[28]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2b]">TIM2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2c]">TIM3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2d]">TIM4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[41]">TIM5_IRQHandler</a> from timer.o(i.TIM5_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[45]">TIM6_DAC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[46]">TIM7_IRQHandler</a> from timer.o(i.TIM7_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3a]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3d]">TIM8_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3c]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3b]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[43]">UART4_IRQHandler</a> from 4g_uart.o(i.UART4_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[44]">UART5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[34]">USART1_IRQHandler</a> from sys.o(i.USART1_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[35]">USART2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[36]">USART3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[56]">USART6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[f]">WWDG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[67]">__main</a> from __main.o(!!!main) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[64]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[63]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[65]">fputc</a> from sys.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[3]">my_mem_init</a> from malloc.o(i.my_mem_init) referenced 2 times from malloc.o(.data)
 <LI><a href="#[4]">my_mem_perused</a> from malloc.o(i.my_mem_perused) referenced 2 times from malloc.o(.data)
 <LI><a href="#[66]">rec_i2s_dma_rx_callback</a> from recorder.o(i.rec_i2s_dma_rx_callback) referenced from recorder.o(i.recoder_enter_rec_mode)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[67]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[68]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[6a]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[16a]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[16b]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[16c]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[16d]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[16e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[6b]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[88]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[6d]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[6f]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[16f]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[76]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[71]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[170]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[171]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[172]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[173]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[174]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[175]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[176]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[177]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[178]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[179]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[17a]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[17b]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[17c]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[17d]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[17e]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[17f]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[180]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[181]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[182]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[183]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[7b]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[184]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[185]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[186]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[187]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[188]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[189]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[18a]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[69]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[18b]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[73]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[75]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[18c]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[77]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[18d]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[95]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[7a]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[18e]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[7c]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[18f]"></a>WFI_SET</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys.o(.emb_text), UNUSED)

<P><STRONG><a name="[12d]"></a>INTX_DISABLE</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[12e]"></a>INTX_ENABLE</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[190]"></a>MSR_MSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sys.o(.emb_text), UNUSED)

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[191]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_recorder
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SetMod
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SetSocket
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_i2s_dma_rx_callback
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[80]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_recorder
</UL>

<P><STRONG><a name="[90]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[6c]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[83]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[6e]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[84]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[85]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[86]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[169]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_recorder
</UL>

<P><STRONG><a name="[130]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>

<P><STRONG><a name="[89]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[192]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>memset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Module_Info
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Query_Connection
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_qacal
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sptdt
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sstso
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_DisConnect_Ap
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap_Old
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_capstp
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Query_Current_SSID_And_RSSI
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_IP_Addr
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_Connection_Status
</UL>

<P><STRONG><a name="[193]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[8c]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>

<P><STRONG><a name="[194]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[115]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wait_sta_connecting_to_ap_and_get_ip
</UL>

<P><STRONG><a name="[197]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[81]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[63]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[8f]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[91]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[70]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[7f]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[19c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[74]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[79]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[19f]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1a0]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>M8266HostIf_SPI_DMA_StartReceiveSendData</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266HostIf_SPI_DMA_StartReceiveSendData))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rrud
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssud
</UL>

<P><STRONG><a name="[96]"></a>M8266HostIf_SPI_Select</STRONG> (Thumb, 244 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266HostIf_SPI_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266HostIf_SPI_Select &rArr; M8266WIFI_SPI_Get_Module_Info &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_SPI_wscr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Module_Info
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssmd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvcp
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
</UL>

<P><STRONG><a name="[ca]"></a>M8266HostIf_SPI_rrs</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266HostIf_SPI_rrs))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rru
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssut
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssu
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rra
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
</UL>

<P><STRONG><a name="[cb]"></a>M8266HostIf_SPI_wrs</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266HostIf_SPI_wrs))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rru
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rra
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
</UL>

<P><STRONG><a name="[9b]"></a>M8266WIFI_SPI_Config_STA_Param</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_Config_STA_Param))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_Config_STA_Param &rArr; M8266WIFI_SPI_capstp &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_SPI_wscr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_capstp
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap
</UL>

<P><STRONG><a name="[9d]"></a>M8266WIFI_SPI_Config_Tcp_Window_num</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_Config_Tcp_Window_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_Config_Tcp_Window_num &rArr; M8266WIFI_SPI_ctpsp &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_SPI_wscr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ctpsp
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SetMod
</UL>

<P><STRONG><a name="[9f]"></a>M8266WIFI_SPI_Delete_Connection</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_Delete_Connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_Delete_Connection &rArr; M8266WIFI_SPI_dlodc &rArr; M8266WIFI_SPI_Query_Connection &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_SPI_wscr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_dlodc
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_recorder
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
</UL>

<P><STRONG><a name="[99]"></a>M8266WIFI_SPI_Get_Module_Info</STRONG> (Thumb, 174 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_Get_Module_Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_Get_Module_Info &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_SPI_wscr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Select
</UL>

<P><STRONG><a name="[a5]"></a>M8266WIFI_SPI_Get_Opmode</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_Get_Opmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_Get_Opmode &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_SPI_wscr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
</UL>

<P><STRONG><a name="[a6]"></a>M8266WIFI_SPI_Get_STA_Connection_Status</STRONG> (Thumb, 122 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_Get_STA_Connection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_Get_STA_Connection_Status &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_SPI_wscr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap_Old
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap
</UL>

<P><STRONG><a name="[a7]"></a>M8266WIFI_SPI_Get_STA_IP_Addr</STRONG> (Thumb, 146 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_Get_STA_IP_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_Get_STA_IP_Addr &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_SPI_wscr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wait_sta_connecting_to_ap_and_get_ip
</UL>

<P><STRONG><a name="[a8]"></a>M8266WIFI_SPI_Has_DataReceived</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_Has_DataReceived))
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_recorder
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wsscrhd
</UL>

<P><STRONG><a name="[aa]"></a>M8266WIFI_SPI_Interface_Communication_OK</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_Interface_Communication_OK))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_Interface_Communication_OK &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rra
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
</UL>

<P><STRONG><a name="[ac]"></a>M8266WIFI_SPI_Interface_Communication_Stress_Test</STRONG> (Thumb, 114 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_Interface_Communication_Stress_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_Interface_Communication_Stress_Test &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rra
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
</UL>

<P><STRONG><a name="[ad]"></a>M8266WIFI_SPI_Query_Connection</STRONG> (Thumb, 244 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_Query_Connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_Query_Connection &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_SPI_wscr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_dlodc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
</UL>

<P><STRONG><a name="[ae]"></a>M8266WIFI_SPI_Query_Tcp_Mss</STRONG> (Thumb, 126 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_Query_Tcp_Mss))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_Query_Tcp_Mss &rArr; M8266WIFI_SPI_qtpsp &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_SPI_wscr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_qtpsp
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Send_BlockData
</UL>

<P><STRONG><a name="[b0]"></a>M8266WIFI_SPI_Query_Tcp_Window_num</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_Query_Tcp_Window_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_Query_Tcp_Window_num &rArr; M8266WIFI_SPI_qtpsp &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_SPI_wscr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_qtpsp
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Send_BlockData
</UL>

<P><STRONG><a name="[b1]"></a>M8266WIFI_SPI_Recv</STRONG> (Thumb, 592 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_Recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_Recv &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_SPI_wscr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wsscbhud
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wsscrhd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rrud
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rru
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wspsr
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Status_Start_To_Rxd_Has_Been_Cleared
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sbis
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvcp
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_RecvData
</UL>

<P><STRONG><a name="[b9]"></a>M8266WIFI_SPI_RecvData</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_RecvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_RecvData &rArr; M8266WIFI_SPI_Recv &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_SPI_wscr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_recorder
</UL>

<P><STRONG><a name="[ba]"></a>M8266WIFI_SPI_STA_Connect_Ap</STRONG> (Thumb, 616 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_STA_Connect_Ap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_STA_Connect_Ap &rArr; M8266WIFI_SPI_STA_DisConnect_Ap &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_SPI_wscr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_DisConnect_Ap
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap_Old
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Config_STA_Param
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvcp
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_Connection_Status
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
</UL>

<P><STRONG><a name="[bb]"></a>M8266WIFI_SPI_STA_Connect_Ap_Old</STRONG> (Thumb, 496 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_STA_Connect_Ap_Old))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_STA_Connect_Ap_Old &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_SPI_wscr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_Connection_Status
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap
</UL>

<P><STRONG><a name="[bc]"></a>M8266WIFI_SPI_STA_DisConnect_Ap</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_STA_DisConnect_Ap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_STA_DisConnect_Ap &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_SPI_wscr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvdnstap
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap
</UL>

<P><STRONG><a name="[be]"></a>M8266WIFI_SPI_STA_Get_HostIP_by_HostName</STRONG> (Thumb, 348 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_STA_Get_HostIP_by_HostName))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_STA_Get_HostIP_by_HostName &rArr; M8266WIFI_SPI_sptdt &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_SPI_wscr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sptdt
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sstso
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvdnstap
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
</UL>

<P><STRONG><a name="[c1]"></a>M8266WIFI_SPI_STA_Query_Current_SSID_And_RSSI</STRONG> (Thumb, 172 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_STA_Query_Current_SSID_And_RSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_STA_Query_Current_SSID_And_RSSI &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_SPI_wscr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
</UL>

<P><STRONG><a name="[c2]"></a>M8266WIFI_SPI_Send_BlockData</STRONG> (Thumb, 332 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_Send_BlockData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_Send_BlockData &rArr; M8266WIFI_SPI_Query_Tcp_Window_num &rArr; M8266WIFI_SPI_qtpsp &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_SPI_wscr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Query_Tcp_Window_num
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Query_Tcp_Mss
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvdnstap
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Tans
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rec_i2s_dma_rx_callback
</UL>

<P><STRONG><a name="[c4]"></a>M8266WIFI_SPI_Set_Opmode</STRONG> (Thumb, 156 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_Set_Opmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_Set_Opmode &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_SPI_wscr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
</UL>

<P><STRONG><a name="[c5]"></a>M8266WIFI_SPI_Setup_Connection</STRONG> (Thumb, 612 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_Setup_Connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_Setup_Connection &rArr; M8266WIFI_SPI_Delete_Connection &rArr; M8266WIFI_SPI_dlodc &rArr; M8266WIFI_SPI_Query_Connection &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_SPI_wscr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Delete_Connection
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Query_Connection
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Get_HostIP_by_HostName
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvdnstap
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvcp
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SetSocket
</UL>

<P><STRONG><a name="[c6]"></a>M8266WIFI_SPI_Slave_Has_Response</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_Slave_Has_Response))
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscr
</UL>

<P><STRONG><a name="[b8]"></a>M8266WIFI_SPI_Status_Start_To_Rxd_Has_Been_Cleared</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_Status_Start_To_Rxd_Has_Been_Cleared))
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wsscbhud
</UL>

<P><STRONG><a name="[c7]"></a>M8266WIFI_SPI_TxdBuffer_Free</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_TxdBuffer_Free))
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
</UL>

<P><STRONG><a name="[9c]"></a>M8266WIFI_SPI_capstp</STRONG> (Thumb, 284 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_capstp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_capstp &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_SPI_wscr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvdnstap
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Config_STA_Param
</UL>

<P><STRONG><a name="[a2]"></a>M8266WIFI_SPI_csb</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_csb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_csb &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rra
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Module_Info
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssmd
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ctpsp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_qtpsp
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_dlodc
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Query_Connection
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_qacal
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sptdt
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sstso
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_DisConnect_Ap
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap_Old
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_capstp
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Set_Opmode
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Query_Current_SSID_And_RSSI
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_IP_Addr
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_Connection_Status
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Opmode
</UL>

<P><STRONG><a name="[9e]"></a>M8266WIFI_SPI_ctpsp</STRONG> (Thumb, 224 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_ctpsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_ctpsp &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_SPI_wscr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvdnstap
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Config_Tcp_Window_num
</UL>

<P><STRONG><a name="[a0]"></a>M8266WIFI_SPI_dlodc</STRONG> (Thumb, 406 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_dlodc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_dlodc &rArr; M8266WIFI_SPI_Query_Connection &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_SPI_wscr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Query_Connection
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_qacal
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Delete_Connection
</UL>

<P><STRONG><a name="[c8]"></a>M8266WIFI_SPI_qacal</STRONG> (Thumb, 268 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_qacal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_qacal &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_SPI_wscr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_dlodc
</UL>

<P><STRONG><a name="[af]"></a>M8266WIFI_SPI_qtpsp</STRONG> (Thumb, 276 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_qtpsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_qtpsp &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_SPI_wscr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvdnstap
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Query_Tcp_Window_num
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Query_Tcp_Mss
</UL>

<P><STRONG><a name="[ab]"></a>M8266WIFI_SPI_rra</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_rra))
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_wrs
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_rrs
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Set_SPI_nCS_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wspsr
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wspss
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Interface_Communication_Stress_Test
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Interface_Communication_OK
</UL>

<P><STRONG><a name="[b7]"></a>M8266WIFI_SPI_rru</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_rru))
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_wrs
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_rrs
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Set_SPI_nCS_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
</UL>

<P><STRONG><a name="[b4]"></a>M8266WIFI_SPI_rrud</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_rrud))
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_DMA_StartReceiveSendData
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Set_SPI_nCS_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
</UL>

<P><STRONG><a name="[b5]"></a>M8266WIFI_SPI_sbis</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_sbis))
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
</UL>

<P><STRONG><a name="[c3]"></a>M8266WIFI_SPI_sdfal</STRONG> (Thumb, 708 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_sdfal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_sdfal &rArr; M8266WIFI_SPI_STA_Get_HostIP_by_HostName &rArr; M8266WIFI_SPI_sptdt &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_SPI_wscr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Get_HostIP_by_HostName
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Wait_SPI_sfad
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssud
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssut
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wspss
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wsbsbs1
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvcp
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Send_BlockData
</UL>

<P><STRONG><a name="[c0]"></a>M8266WIFI_SPI_sptdt</STRONG> (Thumb, 276 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_sptdt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_sptdt &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_SPI_wscr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Get_HostIP_by_HostName
</UL>

<P><STRONG><a name="[a4]"></a>M8266WIFI_SPI_srh</STRONG> (Thumb, 388 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_srh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_srh &rArr; M8266WIFI_SPI_wscr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscr
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rru
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Wait_SPI_sfad
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssu
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvdnstap
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Module_Info
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssmd
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ctpsp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_qtpsp
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_dlodc
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Query_Connection
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_qacal
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sptdt
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sstso
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_DisConnect_Ap
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap_Old
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_capstp
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Set_Opmode
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Query_Current_SSID_And_RSSI
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_IP_Addr
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_Connection_Status
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Opmode
</UL>

<P><STRONG><a name="[a9]"></a>M8266WIFI_SPI_ssa</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_ssa))
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_wrs
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_rrs
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Set_SPI_nCS_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Has_DataReceived
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ctpsp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_qtpsp
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_dlodc
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_qacal
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Get_HostIP_by_HostName
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sstso
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_DisConnect_Ap
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap_Old
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_capstp
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscr
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wsscbhud
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wsscrhd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wspsr
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Status_Start_To_Rxd_Has_Been_Cleared
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Wait_SPI_sfad
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Slave_Has_Response
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_tufs
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_TxdBuffer_Free
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wspss
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wsbsbs1
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sbis
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvdnstap
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Interface_Communication_Stress_Test
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Interface_Communication_OK
</UL>

<P><STRONG><a name="[a3]"></a>M8266WIFI_SPI_ssb</STRONG> (Thumb, 130 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_ssb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_ssb &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rra
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Module_Info
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssmd
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ctpsp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_qtpsp
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_dlodc
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Query_Connection
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_qacal
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sptdt
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sstso
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_DisConnect_Ap
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap_Old
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_capstp
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Set_Opmode
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Query_Current_SSID_And_RSSI
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_IP_Addr
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_Connection_Status
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Opmode
</UL>

<P><STRONG><a name="[97]"></a>M8266WIFI_SPI_ssmd</STRONG> (Thumb, 204 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_ssmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_ssmd &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_SPI_wscr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Select
</UL>

<P><STRONG><a name="[bf]"></a>M8266WIFI_SPI_sstso</STRONG> (Thumb, 456 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_sstso))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_sstso &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_SPI_wscr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvdnstap
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Get_HostIP_by_HostName
</UL>

<P><STRONG><a name="[d2]"></a>M8266WIFI_SPI_ssu</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_ssu))
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_rrs
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Set_SPI_nCS_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
</UL>

<P><STRONG><a name="[d1]"></a>M8266WIFI_SPI_ssud</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_ssud))
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_DMA_StartReceiveSendData
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Set_SPI_nCS_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
</UL>

<P><STRONG><a name="[cf]"></a>M8266WIFI_SPI_ssut</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_ssut))
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_rrs
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Set_SPI_nCS_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
</UL>

<P><STRONG><a name="[d4]"></a>M8266WIFI_SPI_tufs</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_tufs))
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Wait_SPI_sfad
</UL>

<P><STRONG><a name="[cd]"></a>M8266WIFI_SPI_wsbsbs1</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_wsbsbs1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_wsbsbs1 &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
</UL>

<P><STRONG><a name="[a1]"></a>M8266WIFI_SPI_wscbf</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_wscbf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_wscbf &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_TxdBuffer_Free
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Module_Info
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssmd
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ctpsp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_qtpsp
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_dlodc
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Query_Connection
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_qacal
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sptdt
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sstso
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_DisConnect_Ap
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap_Old
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_capstp
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Set_Opmode
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Query_Current_SSID_And_RSSI
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_IP_Addr
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_Connection_Status
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Opmode
</UL>

<P><STRONG><a name="[d3]"></a>M8266WIFI_SPI_wscr</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_wscr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_wscr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Slave_Has_Response
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
</UL>

<P><STRONG><a name="[b3]"></a>M8266WIFI_SPI_wspsr</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_wspsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_wspsr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rra
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
</UL>

<P><STRONG><a name="[ce]"></a>M8266WIFI_SPI_wspss</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_wspss))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_wspss &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rra
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
</UL>

<P><STRONG><a name="[b6]"></a>M8266WIFI_SPI_wsscbhud</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_wsscbhud))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_wsscbhud &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Status_Start_To_Rxd_Has_Been_Cleared
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
</UL>

<P><STRONG><a name="[b2]"></a>M8266WIFI_SPI_wsscrhd</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_SPI_wsscrhd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_wsscrhd &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Has_DataReceived
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
</UL>

<P><STRONG><a name="[d0]"></a>M8266WIFI_Wait_SPI_sfad</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.M8266WIFI_Wait_SPI_sfad))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_Wait_SPI_sfad &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_tufs
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
</UL>

<P><STRONG><a name="[9a]"></a>fvcp</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.fvcp))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvdnstap
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Select
</UL>

<P><STRONG><a name="[bd]"></a>fvdnstap</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, M8266WIFIDrv_STM32F4xx.o(.text.fvdnstap))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fvcp
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Send_BlockData
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ctpsp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_qtpsp
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Get_HostIP_by_HostName
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sstso
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_DisConnect_Ap
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_capstp
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
</UL>

<P><STRONG><a name="[9]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>CmdError</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sdio_sdcard.o(i.CmdError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdError
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[d8]"></a>CmdResp1Error</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, sdio_sdcard.o(i.CmdResp1Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[d9]"></a>CmdResp2Error</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sdio_sdcard.o(i.CmdResp2Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp2Error
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[da]"></a>CmdResp3Error</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sdio_sdcard.o(i.CmdResp3Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp3Error
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[db]"></a>CmdResp6Error</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, sdio_sdcard.o(i.CmdResp6Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CmdResp6Error
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[dc]"></a>CmdResp7Error</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, sdio_sdcard.o(i.CmdResp7Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp7Error
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[1d]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, i2s.o(i.DMA1_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Stream3_IRQHandler &rArr; DMA_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, i2s.o(i.DMA1_Stream4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Stream4_IRQHandler &rArr; DMA_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ussend.o(i.DMA2_Stream7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA2_Stream7_IRQHandler &rArr; DMA_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2ext_RX_DMA_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_TX_DMA_Init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
</UL>

<P><STRONG><a name="[df]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Rec_Start
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Play_Start
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
</UL>

<P><STRONG><a name="[f2]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2ext_RX_DMA_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_TX_DMA_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
</UL>

<P><STRONG><a name="[f6]"></a>DMA_DoubleBufferModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_DoubleBufferModeCmd))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2ext_RX_DMA_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_TX_DMA_Init
</UL>

<P><STRONG><a name="[f5]"></a>DMA_DoubleBufferModeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_DoubleBufferModeConfig))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2ext_RX_DMA_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_TX_DMA_Init
</UL>

<P><STRONG><a name="[11c]"></a>DMA_FlowControllerConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_FlowControllerConfig))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
</UL>

<P><STRONG><a name="[f3]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetCmdStatus))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2ext_RX_DMA_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_TX_DMA_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
</UL>

<P><STRONG><a name="[dd]"></a>DMA_GetITStatus</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_dma.o(i.DMA_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
</UL>

<P><STRONG><a name="[f7]"></a>DMA_ITConfig</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_dma.o(i.DMA_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2ext_RX_DMA_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_TX_DMA_Init
</UL>

<P><STRONG><a name="[f4]"></a>DMA_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2ext_RX_DMA_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_TX_DMA_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
</UL>

<P><STRONG><a name="[c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, exti.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = EXTI15_10_IRQHandler &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[e2]"></a>EXTIX_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, exti.o(i.EXTIX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTIX_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e1]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[e5]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
</UL>

<P><STRONG><a name="[e7]"></a>FindSCR</STRONG> (Thumb, 388 bytes, Stack size 32 bytes, sdio_sdcard.o(i.FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>

<P><STRONG><a name="[fe]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_GPIO_CS_RESET_Init
</UL>

<P><STRONG><a name="[10b]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Init
</UL>

<P><STRONG><a name="[107]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[106]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>I2S2_Init</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, i2s.o(i.I2S2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = I2S2_Init &rArr; I2S_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DMACmd
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recoder_enter_rec_mode
</UL>

<P><STRONG><a name="[f0]"></a>I2S2_TX_DMA_Init</STRONG> (Thumb, 164 bytes, Stack size 80 bytes, i2s.o(i.I2S2_TX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2S2_TX_DMA_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeCmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recoder_enter_rec_mode
</UL>

<P><STRONG><a name="[f8]"></a>I2S2ext_Init</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, i2s.o(i.I2S2ext_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = I2S2ext_Init &rArr; I2S_FullDuplexConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DMACmd
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_FullDuplexConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recoder_enter_rec_mode
</UL>

<P><STRONG><a name="[fa]"></a>I2S2ext_RX_DMA_Init</STRONG> (Thumb, 164 bytes, Stack size 80 bytes, i2s.o(i.I2S2ext_RX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2S2ext_RX_DMA_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeCmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recoder_enter_rec_mode
</UL>

<P><STRONG><a name="[ef]"></a>I2S_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.I2S_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2ext_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_Init
</UL>

<P><STRONG><a name="[f9]"></a>I2S_FullDuplexConfig</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f4xx_spi.o(i.I2S_FullDuplexConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2S_FullDuplexConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2ext_Init
</UL>

<P><STRONG><a name="[ed]"></a>I2S_Init</STRONG> (Thumb, 396 bytes, Stack size 36 bytes, stm32f4xx_spi.o(i.I2S_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2S_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_Init
</UL>

<P><STRONG><a name="[fb]"></a>I2S_Play_Start</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, i2s.o(i.I2S_Play_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2S_Play_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recoder_enter_rec_mode
</UL>

<P><STRONG><a name="[fc]"></a>I2S_Rec_Start</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, i2s.o(i.I2S_Rec_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2S_Rec_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recoder_enter_rec_mode
</UL>

<P><STRONG><a name="[fd]"></a>IIC_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, myiic.o(i.IIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IIC_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Init
</UL>

<P><STRONG><a name="[ff]"></a>IIC_Send_Byte</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, myiic.o(i.IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC_Send_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>

<P><STRONG><a name="[101]"></a>IIC_Start</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, myiic.o(i.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Start &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>

<P><STRONG><a name="[102]"></a>IIC_Stop</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, myiic.o(i.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>

<P><STRONG><a name="[103]"></a>IIC_Wait_Ack</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, myiic.o(i.IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>

<P><STRONG><a name="[104]"></a>IsCardProgramming</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, sdio_sdcard.o(i.IsCardProgramming))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsCardProgramming
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[105]"></a>LED_Init</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, led.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LED_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[108]"></a>M8266HostIf_GPIO_CS_RESET_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, m8266hostif_stm32xx.o(i.M8266HostIf_GPIO_CS_RESET_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = M8266HostIf_GPIO_CS_RESET_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Init
</UL>

<P><STRONG><a name="[109]"></a>M8266HostIf_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, m8266hostif_stm32xx.o(i.M8266HostIf_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = M8266HostIf_Init &rArr; M8266HostIf_SPI_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_GPIO_CS_RESET_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10a]"></a>M8266HostIf_SPI_Init</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, m8266hostif_stm32xx.o(i.M8266HostIf_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = M8266HostIf_SPI_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Init
</UL>

<P><STRONG><a name="[10f]"></a>M8266HostIf_SPI_SetSpeed</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, m8266hostif_stm32xx.o(i.M8266HostIf_SPI_SetSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = M8266HostIf_SPI_SetSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
</UL>

<P><STRONG><a name="[c9]"></a>M8266HostIf_Set_SPI_nCS_Pin</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, m8266hostif_stm32xx.o(i.M8266HostIf_Set_SPI_nCS_Pin))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rrud
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rru
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssud
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssut
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssu
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_rra
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssa
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Hardware_Reset
</UL>

<P><STRONG><a name="[112]"></a>M8266HostIf_Set_nRESET_Pin</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, m8266hostif_stm32xx.o(i.M8266HostIf_Set_nRESET_Pin))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Hardware_Reset
</UL>

<P><STRONG><a name="[98]"></a>M8266HostIf_delay_us</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, m8266hostif_stm32xx.o(i.M8266HostIf_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Tans
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Send_BlockData
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_dlodc
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_sdfal
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap_Old
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Recv
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_srh
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscr
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wsscbhud
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wsscrhd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wspsr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Wait_SPI_sfad
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wscbf
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wspss
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wsbsbs1
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_csb
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_ssb
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Set_Opmode
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Interface_Communication_Stress_Test
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Interface_Communication_OK
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Select
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_delay_ms
</UL>

<P><STRONG><a name="[110]"></a>M8266WIFI_Module_Hardware_Reset</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, m8266wifi_ops.o(i.M8266WIFI_Module_Hardware_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = M8266WIFI_Module_Hardware_Reset &rArr; M8266WIFI_Module_delay_ms &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_delay_ms
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Set_nRESET_Pin
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Set_SPI_nCS_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
</UL>

<P><STRONG><a name="[113]"></a>M8266WIFI_Module_Init_Via_SPI</STRONG> (Thumb, 238 bytes, Stack size 88 bytes, m8266wifi_ops.o(i.M8266WIFI_Module_Init_Via_SPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_Module_Init_Via_SPI &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Set_Opmode
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Query_Current_SSID_And_RSSI
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_STA_Connect_Ap
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Interface_Communication_Stress_Test
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Interface_Communication_OK
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_Connection_Status
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_Opmode
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Select
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wait_sta_connecting_to_ap_and_get_ip
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_delay_ms
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Hardware_Reset
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_SetSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[111]"></a>M8266WIFI_Module_delay_ms</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, m8266wifi_ops.o(i.M8266WIFI_Module_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = M8266WIFI_Module_delay_ms &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_wait_sta_connecting_to_ap_and_get_ip
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Hardware_Reset
</UL>

<P><STRONG><a name="[114]"></a>M8266WIFI_SPI_wait_sta_connecting_to_ap_and_get_ip</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, m8266wifi_ops.o(i.M8266WIFI_SPI_wait_sta_connecting_to_ap_and_get_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SPI_wait_sta_connecting_to_ap_and_get_ip &rArr; M8266WIFI_Module_delay_ms &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Get_STA_IP_Addr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_delay_ms
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
</UL>

<P><STRONG><a name="[116]"></a>M8266WIFI_SetMod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, test_m8266wifi.o(i.M8266WIFI_SetMod))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SetMod &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Config_Tcp_Window_num
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[117]"></a>M8266WIFI_SetSocket</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, test_m8266wifi.o(i.M8266WIFI_SetSocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_SetSocket &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Setup_Connection
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_recorder
</UL>

<P><STRONG><a name="[118]"></a>M8266WIFI_Tans</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, test_m8266wifi.o(i.M8266WIFI_Tans))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = M8266WIFI_Tans &rArr; M8266WIFI_SPI_Send_BlockData &rArr; M8266WIFI_SPI_Query_Tcp_Window_num &rArr; M8266WIFI_SPI_qtpsp &rArr; M8266WIFI_SPI_srh &rArr; M8266WIFI_SPI_wscr &rArr; M8266HostIf_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Send_BlockData
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_recorder
</UL>

<P><STRONG><a name="[8]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[e6]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Int_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2ext_RX_DMA_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_TX_DMA_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[136]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[f1]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2ext_RX_DMA_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_TX_DMA_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_GPIO_CS_RESET_Init
</UL>

<P><STRONG><a name="[eb]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Int_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_Init
</UL>

<P><STRONG><a name="[ec]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_Init
</UL>

<P><STRONG><a name="[e3]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Init
</UL>

<P><STRONG><a name="[10c]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Init
</UL>

<P><STRONG><a name="[137]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[119]"></a>SDEnWideBus</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, sdio_sdcard.o(i.SDEnWideBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[d7]"></a>SDIO_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>

<P><STRONG><a name="[126]"></a>SDIO_Clock_Set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sdio_sdcard.o(i.SDIO_Clock_Set))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[e9]"></a>SDIO_DataConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_DataConfig))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[d6]"></a>SDIO_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>

<P><STRONG><a name="[128]"></a>SDIO_GetPowerState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[40]"></a>SDIO_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sdio_sdcard.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SDIO_IRQHandler &rArr; SD_ProcessIRQSrc &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[129]"></a>SDIO_Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[121]"></a>SDIO_Register_Deinit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, sdio_sdcard.o(i.SDIO_Register_Deinit))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[e8]"></a>SDIO_SendCommand</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_SendCommand))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[12a]"></a>SDIO_SetPowerState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_SetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[11b]"></a>SD_DMA_Config</STRONG> (Thumb, 118 bytes, Stack size 80 bytes, sdio_sdcard.o(i.SD_DMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[11d]"></a>SD_EnableWideBusOperation</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, sdio_sdcard.o(i.SD_EnableWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[124]"></a>SD_GetCardInfo</STRONG> (Thumb, 772 bytes, Stack size 20 bytes, sdio_sdcard.o(i.SD_GetCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[11e]"></a>SD_GetState</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sdio_sdcard.o(i.SD_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_GetState &rArr; SD_SendStatus &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>

<P><STRONG><a name="[120]"></a>SD_Init</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, sdio_sdcard.o(i.SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetDeviceMode
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Register_Deinit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Clock_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[123]"></a>SD_InitializeCards</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, sdio_sdcard.o(i.SD_InitializeCards))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_InitializeCards &rArr; CmdResp6Error
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[122]"></a>SD_PowerON</STRONG> (Thumb, 460 bytes, Stack size 32 bytes, sdio_sdcard.o(i.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_PowerON &rArr; CmdResp7Error
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[11a]"></a>SD_ProcessIRQSrc</STRONG> (Thumb, 318 bytes, Stack size 8 bytes, sdio_sdcard.o(i.SD_ProcessIRQSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SD_ProcessIRQSrc &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[12b]"></a>SD_ReadBlock</STRONG> (Thumb, 574 bytes, Stack size 40 bytes, sdio_sdcard.o(i.SD_ReadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_ReadBlock &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>

<P><STRONG><a name="[12f]"></a>SD_ReadDisk</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, sdio_sdcard.o(i.SD_ReadDisk))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[131]"></a>SD_ReadMultiBlocks</STRONG> (Thumb, 710 bytes, Stack size 56 bytes, sdio_sdcard.o(i.SD_ReadMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>

<P><STRONG><a name="[125]"></a>SD_SelectDeselect</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sdio_sdcard.o(i.SD_SelectDeselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SD_SelectDeselect &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[11f]"></a>SD_SendStatus</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sdio_sdcard.o(i.SD_SendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_SendStatus &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>

<P><STRONG><a name="[127]"></a>SD_SetDeviceMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sdio_sdcard.o(i.SD_SetDeviceMode))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[132]"></a>SD_WriteBlock</STRONG> (Thumb, 862 bytes, Stack size 80 bytes, sdio_sdcard.o(i.SD_WriteBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
</UL>

<P><STRONG><a name="[133]"></a>SD_WriteDisk</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, sdio_sdcard.o(i.SD_WriteDisk))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[134]"></a>SD_WriteMultiBlocks</STRONG> (Thumb, 934 bytes, Stack size 72 bytes, sdio_sdcard.o(i.SD_WriteMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
</UL>

<P><STRONG><a name="[10e]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_SetSpeed
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Init
</UL>

<P><STRONG><a name="[ee]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2ext_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_Init
</UL>

<P><STRONG><a name="[10d]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_SPI_Init
</UL>

<P><STRONG><a name="[b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[e4]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f4xx_syscfg.o(i.SYSCFG_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
</UL>

<P><STRONG><a name="[135]"></a>SYS_Init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, sys.o(i.SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = SYS_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[138]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[e]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(.text)
</UL>
<P><STRONG><a name="[41]"></a>TIM5_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, timer.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM5_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[13d]"></a>TIM5_Int_Init</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, timer.o(i.TIM5_Int_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM5_Int_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>TIM7_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, timer.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM7_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[13c]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[140]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Int_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[13b]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f4xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[13f]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Int_Init
</UL>

<P><STRONG><a name="[143]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[13e]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Int_Init
</UL>

<P><STRONG><a name="[43]"></a>UART4_IRQHandler</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, 4g_uart.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART4_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART1_IRQHandler</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, sys.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[167]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[141]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[168]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[144]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[142]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[a]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[145]"></a>WM8978_ADDA_Cfg</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, wm8978.o(i.WM8978_ADDA_Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WM8978_ADDA_Cfg &rArr; WM8978_Write_Reg &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recoder_enter_rec_mode
</UL>

<P><STRONG><a name="[148]"></a>WM8978_AUX_Gain</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, wm8978.o(i.WM8978_AUX_Gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WM8978_AUX_Gain &rArr; WM8978_Write_Reg &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Input_Cfg
</UL>

<P><STRONG><a name="[149]"></a>WM8978_I2S_Cfg</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wm8978.o(i.WM8978_I2S_Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WM8978_I2S_Cfg &rArr; WM8978_Write_Reg &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recoder_enter_rec_mode
</UL>

<P><STRONG><a name="[14a]"></a>WM8978_Init</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, wm8978.o(i.WM8978_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WM8978_Init &rArr; WM8978_Write_Reg &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14b]"></a>WM8978_Input_Cfg</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, wm8978.o(i.WM8978_Input_Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = WM8978_Input_Cfg &rArr; WM8978_LINEIN_Gain &rArr; WM8978_Write_Reg &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Read_Reg
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_LINEIN_Gain
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_AUX_Gain
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recoder_enter_rec_mode
</UL>

<P><STRONG><a name="[14c]"></a>WM8978_LINEIN_Gain</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, wm8978.o(i.WM8978_LINEIN_Gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WM8978_LINEIN_Gain &rArr; WM8978_Write_Reg &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Read_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Input_Cfg
</UL>

<P><STRONG><a name="[14d]"></a>WM8978_MIC_Gain</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm8978.o(i.WM8978_MIC_Gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WM8978_MIC_Gain &rArr; WM8978_Write_Reg &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recoder_enter_rec_mode
</UL>

<P><STRONG><a name="[14e]"></a>WM8978_Output_Cfg</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wm8978.o(i.WM8978_Output_Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WM8978_Output_Cfg &rArr; WM8978_Write_Reg &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recoder_enter_rec_mode
</UL>

<P><STRONG><a name="[146]"></a>WM8978_Read_Reg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm8978.o(i.WM8978_Read_Reg))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_LINEIN_Gain
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Input_Cfg
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_AUX_Gain
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_ADDA_Cfg
</UL>

<P><STRONG><a name="[14f]"></a>WM8978_SPKvol_Set</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wm8978.o(i.WM8978_SPKvol_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WM8978_SPKvol_Set &rArr; WM8978_Write_Reg &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Write_Reg
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recoder_enter_rec_mode
</UL>

<P><STRONG><a name="[147]"></a>WM8978_Write_Reg</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, wm8978.o(i.WM8978_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WM8978_Write_Reg &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_SPKvol_Set
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Output_Cfg
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_MIC_Gain
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_LINEIN_Gain
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Input_Cfg
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_I2S_Cfg
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_AUX_Gain
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_ADDA_Cfg
</UL>

<P><STRONG><a name="[87]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[7d]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[12c]"></a>convert_from_bytes_to_power_of_two</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sdio_sdcard.o(i.convert_from_bytes_to_power_of_two))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[e0]"></a>delay_ms</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sys.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_recorder
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SetMod
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SetSocket
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[100]"></a>delay_us</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sys.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_delay_us
</UL>

<P><STRONG><a name="[154]"></a>disk_initialize</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = disk_initialize &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[155]"></a>disk_read</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = disk_read &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[156]"></a>disk_status</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, diskio.o(i.disk_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = disk_status &rArr; SD_GetState &rArr; SD_SendStatus &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[157]"></a>disk_write</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>

<P><STRONG><a name="[158]"></a>f_mount</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15b]"></a>fatfs_init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, fatfs.o(i.fatfs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fatfs_init &rArr; mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sys.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[78]"></a>main</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = main &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_recorder
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Int_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SetMod
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Module_Init_Via_SPI
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266HostIf_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIX_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[164]"></a>my_mem_free</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, malloc.o(i.my_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = my_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>

<P><STRONG><a name="[3]"></a>my_mem_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, malloc.o(i.my_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = my_mem_init &rArr; mymemset
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[165]"></a>my_mem_malloc</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, malloc.o(i.my_mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = my_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>

<P><STRONG><a name="[4]"></a>my_mem_perused</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, malloc.o(i.my_mem_perused))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = my_mem_perused
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[163]"></a>myfree</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, malloc.o(i.myfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = myfree &rArr; my_mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_recorder
</UL>

<P><STRONG><a name="[15c]"></a>mymalloc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, malloc.o(i.mymalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mymalloc &rArr; my_mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_recorder
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatfs_init
</UL>

<P><STRONG><a name="[162]"></a>mymemset</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, malloc.o(i.mymemset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mymemset
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_mem_init
</UL>

<P><STRONG><a name="[66]"></a>rec_i2s_dma_rx_callback</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, recorder.o(i.rec_i2s_dma_rx_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = rec_i2s_dma_rx_callback &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Send_BlockData
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> recorder.o(i.recoder_enter_rec_mode)
</UL>
<P><STRONG><a name="[166]"></a>recoder_enter_rec_mode</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, recorder.o(i.recoder_enter_rec_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = recoder_enter_rec_mode &rArr; I2S2ext_RX_DMA_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Rec_Start
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Play_Start
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2ext_RX_DMA_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2ext_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_TX_DMA_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S2_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_SPKvol_Set
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Output_Cfg
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_MIC_Gain
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_Input_Cfg
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_I2S_Cfg
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WM8978_ADDA_Cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_recorder
</UL>

<P><STRONG><a name="[160]"></a>wav_recorder</STRONG> (Thumb, 234 bytes, Stack size 216 bytes, recorder.o(i.wav_recorder))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = wav_recorder &rArr; M8266WIFI_SetSocket &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_Tans
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SetSocket
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_RecvData
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Has_DataReceived
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M8266WIFI_SPI_Delete_Connection
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recoder_enter_rec_mode
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1a1]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1a2]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[13a]"></a>SetSysClock</STRONG> (Thumb, 270 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[139]"></a>uart_init</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, sys.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = uart_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[150]"></a>check_fs</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[15f]"></a>clst2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clst2sect))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[15a]"></a>find_volume</STRONG> (Thumb, 1214 bytes, Stack size 112 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_word
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_qword
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_dword
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clst2sect
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[159]"></a>get_ldnumber</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[15d]"></a>ld_dword</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.ld_dword))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[15e]"></a>ld_qword</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ff.o(i.ld_qword))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ld_qword
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[152]"></a>ld_word</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ff.o(i.ld_word))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[153]"></a>mem_cmp</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[151]"></a>move_window</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[161]"></a>sync_window</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[64]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
